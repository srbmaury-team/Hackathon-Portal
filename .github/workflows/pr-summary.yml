name: üß† PR Summary Generator

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  summarize:
    name: Generate PR Summary
    runs-on: ubuntu-latest

    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: üõ†Ô∏è Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # <-- important! ensures full git history

      - name: üîÑ Ensure main branch is available
        run: |
          git fetch origin main
          echo "‚úÖ Main branch fetched."

      - name: üìä Get changed files statistics
        id: file-stats
        run: |
          BASE_BRANCH=$(git merge-base origin/main HEAD || echo "origin/main")
          
          # Get list of changed files with status
          git diff --name-status $BASE_BRANCH > file-changes.txt
          
          # Get detailed diff
          git diff $BASE_BRANCH > changes.diff
          
          # Count changes
          FILES_CHANGED=$(wc -l < file-changes.txt | tr -d ' ')
          ADDITIONS=$(git diff --numstat $BASE_BRANCH | awk '{sum+=$1} END {print sum}')
          DELETIONS=$(git diff --numstat $BASE_BRANCH | awk '{sum+=$2} END {print sum}')
          
          echo "FILES_CHANGED=$FILES_CHANGED" >> $GITHUB_OUTPUT
          echo "ADDITIONS=$ADDITIONS" >> $GITHUB_OUTPUT
          echo "DELETIONS=$DELETIONS" >> $GITHUB_OUTPUT
          
          echo "‚úÖ Statistics gathered: $FILES_CHANGED files, +$ADDITIONS/-$DELETIONS"

      - name: üìã Prepare file changes list
        id: file-list
        run: |
          echo "FILE_LIST<<EOF" >> $GITHUB_OUTPUT
          cat file-changes.txt | while read status file; do
            case $status in
              A) echo "- üÜï **Added:** \`$file\`" ;;
              M) echo "- ‚úèÔ∏è **Modified:** \`$file\`" ;;
              D) echo "- üóëÔ∏è **Deleted:** \`$file\`" ;;
              R*) echo "- üîÑ **Renamed:** \`$file\`" ;;
              *) echo "- üìù **Changed:** \`$file\`" ;;
            esac
          done >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: üìù Generate Detailed Summary
        id: detailed-summary
        run: |
          echo "üîç Analyzing changes in detail..."
          BASE_BRANCH=$(git merge-base origin/main HEAD || echo "origin/main")
          
          # Create a detailed analysis of changes
          cat << 'EOF' > summary.md
          #### üìù Detailed Changes
          
          EOF
          
          # Analyze each changed file
          git diff --name-status $BASE_BRANCH | while read status file; do
            echo "" >> summary.md
            case $status in
              A)
                echo "**üÜï New File: \`$file\`**" >> summary.md
                # Count lines in new file
                LINES=$(git show HEAD:"$file" 2>/dev/null | wc -l | tr -d ' ')
                echo "  - Added $LINES lines" >> summary.md
                ;;
              M)
                echo "**‚úèÔ∏è Modified: \`$file\`**" >> summary.md
                # Get additions and deletions
                STATS=$(git diff --numstat $BASE_BRANCH -- "$file")
                ADDED=$(echo "$STATS" | awk '{print $1}')
                REMOVED=$(echo "$STATS" | awk '{print $2}')
                echo "  - Changed: +$ADDED/-$REMOVED lines" >> summary.md
                
                # Try to identify what changed
                if git diff $BASE_BRANCH -- "$file" | grep -q "^+.*function\|^+.*const\|^+.*export"; then
                  echo "  - üîß Code modifications detected" >> summary.md
                fi
                if git diff $BASE_BRANCH -- "$file" | grep -q "^+.*test\|^+.*describe\|^+.*it("; then
                  echo "  - ‚úÖ Test updates included" >> summary.md
                fi
                if git diff $BASE_BRANCH -- "$file" | grep -q "^+.*import\|^+.*require"; then
                  echo "  - üì¶ Dependency changes" >> summary.md
                fi
                ;;
              D)
                echo "**üóëÔ∏è Deleted: \`$file\`**" >> summary.md
                ;;
              R*)
                NEW_FILE=$(echo "$file" | cut -f2)
                echo "**üîÑ Renamed: \`$file\` ‚Üí \`$NEW_FILE\`**" >> summary.md
                ;;
            esac
          done
          
          echo "" >> summary.md
          echo "#### üéØ Summary" >> summary.md
          
          # Count test files
          TEST_FILES=$(git diff --name-status $BASE_BRANCH | grep -c "test\|spec" || echo "0")
          if [ "$TEST_FILES" -gt 0 ]; then
            echo "- ‚úÖ **Testing:** $TEST_FILES test file(s) modified/added" >> summary.md
          fi
          
          # Check for config changes
          CONFIG_FILES=$(git diff --name-status $BASE_BRANCH | grep -c "config\|\.yml\|\.yaml\|\.json" || echo "0")
          if [ "$CONFIG_FILES" -gt 0 ]; then
            echo "- ‚öôÔ∏è **Configuration:** $CONFIG_FILES config file(s) updated" >> summary.md
          fi
          
          # Check for documentation
          DOC_FILES=$(git diff --name-status $BASE_BRANCH | grep -c "README\|\.md\|docs/" || echo "0")
          if [ "$DOC_FILES" -gt 0 ]; then
            echo "- üìö **Documentation:** Updated" >> summary.md
          fi
          
          echo "DETAILED_SUMMARY<<EOF" >> $GITHUB_OUTPUT
          cat summary.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "‚úÖ Detailed summary generated"

      - name: ü§ñ Try AI Enhancement (Optional)
        id: ai-summary
        continue-on-error: true
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          if [ -z "$OPENAI_API_KEY" ]; then
            echo "‚ö†Ô∏è OPENAI_API_KEY not configured, skipping AI enhancement"
            echo "AI_AVAILABLE=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "üß† Attempting AI-powered analysis..."
          
          # Prepare a condensed diff (first 10000 chars)
          DIFF_SAMPLE=$(head -c 10000 changes.diff | sed 's/"/\\"/g' | sed 's/$/\\n/' | tr -d '\n')
          
          # Make API call with better error handling
          RESPONSE=$(curl -s -w "\n%{http_code}" https://api.openai.com/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -d "{
              \"model\": \"gpt-4o-mini\",
              \"messages\": [
                {
                  \"role\": \"system\",
                  \"content\": \"You are a code reviewer. Summarize PR changes in 3-5 clear bullet points.\"
                },
                {
                  \"role\": \"user\",
                  \"content\": \"Summarize these changes concisely:\\n\\n$DIFF_SAMPLE\"
                }
              ],
              \"temperature\": 0.3,
              \"max_tokens\": 500
            }")
          
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | head -n-1)
          
          if [ "$HTTP_CODE" = "200" ]; then
            AI_SUMMARY=$(echo "$BODY" | jq -r '.choices[0].message.content // empty')
            if [ -n "$AI_SUMMARY" ]; then
              echo "AI_SUMMARY<<EOF" >> $GITHUB_OUTPUT
              echo "" >> $GITHUB_OUTPUT
              echo "#### ü§ñ AI Insights" >> $GITHUB_OUTPUT
              echo "$AI_SUMMARY" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
              echo "AI_AVAILABLE=true" >> $GITHUB_OUTPUT
              echo "‚úÖ AI summary generated successfully"
            else
              echo "AI_AVAILABLE=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "‚ö†Ô∏è OpenAI API returned status $HTTP_CODE"
            echo "AI_AVAILABLE=false" >> $GITHUB_OUTPUT
          fi

      - name: üí¨ Post PR Comment
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          REPO: ${{ github.repository }}
        run: |
          # Build the comment body
          cat << 'COMMENT_EOF' > comment.md
          ## ü§ñ Automated PR Analysis
          
          ### üìä Change Statistics
          - **Files Changed:** ${{ steps.file-stats.outputs.FILES_CHANGED }}
          - **Lines Added:** +${{ steps.file-stats.outputs.ADDITIONS }}
          - **Lines Deleted:** -${{ steps.file-stats.outputs.DELETIONS }}
          
          ---
          
          ### üìÅ Files Changed
          ${{ steps.file-list.outputs.FILE_LIST }}
          
          ---
          
          ${{ steps.detailed-summary.outputs.DETAILED_SUMMARY }}
          
          COMMENT_EOF
          
          # Add AI summary if available
          if [ "${{ steps.ai-summary.outputs.AI_AVAILABLE }}" = "true" ]; then
            cat << 'AI_EOF' >> comment.md
          
          ---
          
          ${{ steps.ai-summary.outputs.AI_SUMMARY }}
          AI_EOF
          fi
          
          # Add footer
          cat << 'FOOTER_EOF' >> comment.md
          
          ---
          
          <sub>ü§ñ Generated automatically | Review carefully and use your judgment</sub>
          FOOTER_EOF
          
          # Post the comment
          gh pr comment $PR_NUMBER --body-file comment.md
          
          echo "üí¨ Bulletwise summary posted to PR #$PR_NUMBER"
